'''
You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
'''

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        adj = [[] for i in range(n)]
        for i in range(n):
            for j in range(n):
                if i==j:continue
                if graph[i][j]==1:adj[i].append(j)
        ans = float('inf')
        res = None
        m = len(initial)
        def dfs(node,infected):
            if infected[node] == True:return 0
            ans = 1
            infected[node]=True            
            for x in adj[node]:
                if infected[x] == False:ans += dfs(x,infected)
            return ans        
        for i in range(m):
            infected = [False]*n
            new = 0
            # we do not infect node with index i initially
            for j in range(m):
                if i==j : continue
                if new > ans: break
                new += dfs(initial[j],infected)
            if new < ans :
                res = initial[i]       
                ans = new
            elif new == ans:
                res = initial[i] if initial[i] < res else res                
        return  res
