'''
You are given a binary string s that contains at least one '1'.

You have to rearrange the bits in such a way that the resulting binary number is the maximum odd binary number that can be created from this combination.

Return a string representing the maximum odd binary number that can be created from the given combination.

Note that the resulting string can have leading zeros.
'''


class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        
        num1 = s.count('1')

        if num1 == 1:
            return s.count('0')*'0' + '1'
        
        else:
            front = (s.count('1')-1)*'1' + s.count('0')*'0' + '1'
            return front
------------------------------------------------------------------------
#this is much shorter:

class Solution:
    def maximumOddBinaryNumber(self, s: str) -> str:
        
        ctr = Counter(s)
        return '1'*(ctr['1']-1) + '0'*ctr['0'] + '1'
